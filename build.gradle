import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id('maven-publish')
    alias(libs.plugins.spotless) apply(false)
}

defaultTasks('build')

subprojects {
    apply(plugin: 'java')
    apply(plugin: libs.plugins.spotless.get().pluginId)

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenLocal()
        mavenCentral()

        // NeuralNexus
        maven {
            name = "NeuralNexus"
            url = "https://maven.neuralnexus.dev/releases"
        }

        // NeuralNexus Mirror
        maven {
            name = 'NeuralNexus Mirror'
            url = 'https://maven.neuralnexus.dev/mirror'
        }

        // Minecraft
        maven {
            name = "minecraft-repo"
            url = "https://libraries.minecraft.net/"
        }

        // Bukkit/Bungee
        maven {
            name = "spigotmc-repo"
            url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
        }

        // Paper/Velocity
        maven {
            name = "papermc-repo"
            url = "https://repo.papermc.io/repository/maven-public/"
        }

        // Sponge
        maven {
            name = 'SpongePowered'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }

        // Parchment Mappings
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }

        // Arclight
        maven {
            name = 'Arclight Maven'
            url = 'https://maven.izzel.io/releases'
        }

        // Mohist
        maven {
            name = 'Mohist Maven'
            url = 'https://maven.mohistmc.com/'
        }

        // Ketting
        maven {
            name = "Ketting"
            url = "https://reposilite.c0d3m4513r.com/repository/Ketting/"
        }

        // Legacy Fabric
        maven {
            name = "legacy-fabric"
            url = "https://repo.legacyfabric.net/repository/legacyfabric/"
        }
    }

    dependencies {
        compileOnly('org.jetbrains:annotations:24.1.0')
    }

    spotless {
        format 'misc', {
            target '*.gradle', '.gitattributes', '.gitignore'

            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
        }
        java {
            importOrder()
            removeUnusedImports()
            cleanthat()
            googleJavaFormat('1.17.0').aosp().formatJavadoc(true).reorderImports(true)
            formatAnnotations()
            licenseHeader """/**
 * Copyright (c) \$YEAR Dylan Sperrer - dylan@sperrer.ca
 * The project is Licensed under <a href="https://github.com/p0t4t0sandwich/TaterLib/blob/dev/LICENSE">GPL-3</a>
 * The API is Licensed under <a href="https://github.com/p0t4t0sandwich/TaterLib/blob/dev/LICENSE-API">MIT</a>
 */
"""
        }
    }

    tasks.build.dependsOn(spotlessApply)
    tasks.findByName('shadowJar')?.dependsOn(spotlessApply)
    tasks.findByName('remapShadowJar')?.dependsOn(spotlessApply)
}

// --------------------------- Merge mixin configs --------------------------------
ext.mergeMixinConfigs = { List<File> mixinConfigs ->
    File merged = file('./build/tmp/taterlib.mixins.json')
    def mixinConfigJson = [:]
    mixinConfigJson.put("compatibilityLevel", "JAVA_8")
    mixinConfigJson.put("minVersion", "0.8")
    def injectors = [:]
    injectors.put("defaultRequire", 1)
    mixinConfigJson.put("injectors", injectors)
    mixinConfigJson.put("required", false)
    mixinConfigJson.put("plugin", "dev.neuralnexus.taterlib.mixin.plugin.TaterLibMixinPlugin")
    mixinConfigJson.put("package", "dev.neuralnexus.taterlib.mixin")
    mixinConfigJson.put("mixins", [])
    mixinConfigJson.put("client", [])
    mixinConfigJson.put("server", [])

    JsonSlurper json = new JsonSlurper()
    def mixins = []
    def client = []
    def server = []
    mixinConfigs.each { mixinConfig ->
        def mixinConfigJsonFile = json.parse(mixinConfig)
        if (mixinConfigJsonFile.get("mixins") != null) {
            mixins += mixinConfigJsonFile.get("mixins")
        }
        if (mixinConfigJsonFile.get("client") != null) {
            client += mixinConfigJsonFile.get("client")
        }
        if (mixinConfigJsonFile.get("server") != null) {
            server += mixinConfigJsonFile.get("server")
        }
    }
    mixins.sort { a, b -> a.compareTo(b) }
    client.sort { a, b -> a.compareTo(b) }
    server.sort { a, b -> a.compareTo(b) }
    mixinConfigJson.put("mixins", mixins)
    mixinConfigJson.put("client", client)
    mixinConfigJson.put("server", server)
    merged.text = JsonOutput.prettyPrint(JsonOutput.toJson(mixinConfigJson))
    return fileTree(merged)
}

// --------------------------- Jar file helper method --------------------------------
ext.bundleJars = { Map<String, List<String>> platformVersions ->
    def jarFiles = [
            file("./api/build/libs/taterapi-full-${version}.jar"),
            file("./common/build/libs/${project_id}-common-full-${version}.jar"),
            file('./tooling/conditional-mixins/build/libs/conditional-mixins-0.1.1.jar'),
            file("./tooling/loader/build/libs/${project_id}-loader-0.1.3.jar")
    ]
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            jarFiles.add(file("${platform}/${platform}-${mcVersion}/build/libs/${project_id}-${platform}-${mcVersion}-${version}.jar") as File)
        }
    }
    def zipped = jarFiles.collect {
        zipTree(it).matching {
            exclude('taterlib.mixins.*')
        }
    }
    def mixinConfigs = []
    jarFiles.collect {
        zipTree(it).files.each { file ->
            if (file.name.startsWith("taterlib.mixins.")) {
                mixinConfigs.add(file)
            }
        }
    }
    zipped.add(mergeMixinConfigs(mixinConfigs))
    return zipped
}

// --------------------------- Clear build/libs --------------------------------
tasks.register('clear_build') {
    delete fileTree('build/libs')
}

// --------------------------- Build api --------------------------------
tasks.register('build_api', Jar) {
    dependsOn('clear_build')
    dependsOn(':api:test')
    dependsOn(':api:jar')
    dependsOn(':common:jar')
    dependsOn(':tooling:loader:build')

    archiveFileName = "taterapi-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} API",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }
    ArrayList<File> jarFiles = [
            file("./api/build/libs/taterapi-${version}.jar"),
            file("./common/build/libs/${project_id}-common-${version}.jar"),
            file("./tooling/loader/build/libs/${project_id}-loader-0.1.3.jar")
    ]
    from {
        jarFiles.collect { zipTree(it) }
    }
}

var platformVersions = [:]
platformVersions.put("bukkit", Arrays.asList(
        "utils",
        "b1.7.3", "1.2.5", "1.6.4", "1.7.10",
        "1.8.8", "1.13.2", "1.15.2", "1.20"))
platformVersions.put("bungee", Arrays.asList("1.4.7", "1.8", "1.12", "1.20"))
platformVersions.put("fabric", Arrays.asList(
        "1.7.10", "1.8.9", "1.9.4", "1.10.2", "1.11.2", "1.12.2",
        "1.14.4", "1.15", "1.16", "1.16.2", "1.17", "1.18",
        "1.19", "1.19.1", "1.19.4",
        "1.20", "1.20.2", "1.20.6", "1.21"))
platformVersions.put("forge", Arrays.asList(
        "utils-modern",
        "1.6.4",
        "1.7.10", "1.8.9", "1.9.4", "1.10.2", "1.11.2",
        "1.12.2", "1.13.2", "1.14.4", "1.15", "1.16.2",
        "1.17.1", "1.18", "1.18.2", "1.19", "1.19.4",
        "1.20", "1.20.2", "1.20.6"))
platformVersions.put("neoforge", Arrays.asList("1.20.2"))
platformVersions.put("sponge", Arrays.asList(
        "4", "5", "6", "7",
        "8", "9", "10", "11"))
platformVersions.put("vanilla", Arrays.asList(
        "1.14.4", "1.15", "1.16", "1.16.2", "1.17", "1.18",
        "1.19", "1.19.1", "1.19.4",
        "1.20", "1.20.2", "1.20.6", "1.21"))
platformVersions.put("velocity", Arrays.asList("3"))

// --------------------------- Build MonoJar --------------------------------
tasks.register('build_monojar', Jar) {
    dependsOn(':api:shadowJar')
    dependsOn(':common:shadowJar')
    dependsOn(':tooling:conditional-mixins:shadowJar')
    dependsOn(':tooling:loader:build')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            dependsOn(":${platform}:${platform}-${mcVersion}:build")
        }
    }

    String mc_version = 'b1.7.3-1.21'
    archiveFileName = "${project_id}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLCorePluginContainsFMLMod': 'true',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'MixinConfigs': "taterlib.mixins.json"
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }
    from {
        bundleJars(platformVersions)
    }
}

// --------------------------- Build Dev --------------------------------
tasks.register('build_dev', Jar) {
    dependsOn(':api:shadowJar')
    dependsOn(':common:shadowJar')
    dependsOn(':tooling:conditional-mixins:shadowJar')
    dependsOn(':tooling:loader:build')

    String mc_version = 'b1.7.3-1.21'
    archiveFileName = "${project_id}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${project_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLCorePluginContainsFMLMod': 'true',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'MixinConfigs': "taterlib.mixins.json"
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }
    from {
        bundleJars(platformVersions)
    }
}

publishing {
    publications {
        uploadAPI(MavenPublication) {
            groupId = group_id
            version = version

            artifact(build_api) {
                artifactId = "taterapi"
            }

            pom {
                name = project_name
                description = project_description
                url = homepage_url
                licenses {
                    license {
                        name = 'GPL-3'
                        url = 'https://github.com/p0t4t0sandwich/TaterLib/blob/main/LICENSE'
                    }
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/p0t4t0sandwich/TaterLib/blob/main/LICENSE-API'
                    }
                }
                developers {
                    developer {
                        id = 'p0t4t0sandwich'
                        name = 'Dylan Sperrer'
                        email = 'dylan@neuralnexus.dev'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/p0t4t0sandwich/TaterLib.git'
                    url = 'https://github.com/p0t4t0sandwich/TaterLib'
                }
            }
        }
    }
    repositories {
        mavenLocal()
        maven {
            name = "NeuralNexusReleases"
            url = "https://maven.neuralnexus.dev/releases"
            credentials {
                username = project.findProperty("neuralNexusUsername") ?: System.getenv("NEURALNEXUS_USERNAME")
                password = project.findProperty("neuralNexusPassword") ?: System.getenv("NEURALNEXUS_PASSWORD")
            }
        }
        maven {
            name = "NeuralNexusSnapshots"
            url = "https://maven.neuralnexus.dev/snapshots"
            credentials {
                username = project.findProperty("neuralNexusUsername") ?: System.getenv("NEURALNEXUS_USERNAME")
                password = project.findProperty("neuralNexusPassword") ?: System.getenv("NEURALNEXUS_PASSWORD")
            }
        }
    }
}
