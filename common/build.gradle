plugins {
    alias(libs.plugins.shadow)
}

dependencies {
    // Configurate
    compileOnly('org.spongepowered:configurate-hocon:4.2.0-SNAPSHOT')
    compileOnly('io.leangen.geantyref:geantyref:1.3.15')

    // bStats
    compileOnly('org.bstats:bstats-base:3.0.2')

    // MCLogs
    compileOnly('gs.mclo:api:3.0.1')

    // Gson
    implementation('com.google.code.gson:gson:2.10.1')

    // Guava
    implementation('com.google.guava:guava:33.0.0-jre')

    // Mixin
    compileOnly('org.spongepowered:mixin:0.8.5')
    compileOnly('org.ow2.asm:asm-tree:6.2')

    // Mojang AuthLib
    compileOnly('com.mojang:authlib:1.5.25')

    // Tooling
    compileOnly(project(':api'))
    compileOnly(project(':tooling:conditional-mixins'))
    compileOnly(project(':tooling:entrypoint-spoof'))
    compileOnly(project(':tooling:loader'))
}

java.disableAutoTargetJvm()

jar {
    archiveFileName = "${project_id}-common-${version}.jar"
}

shadowJar {
    dependencies {
        include(dependency("${group_id}:${project_id}:${version}"))
        exclude('META-INF', 'META-INF/**')
        exclude('LICENSE')
        exclude('INFO_BIN', 'INFO_SRC')

        // Gson
        include(dependency('com.google.code.gson:gson:2.10.1'))

        // Guava
        include(dependency('com.google.guava:guava:33.0.0-jre'))
    }
    // Configurate
    relocate('org.spongepowered.configurate', 'dev.neuralnexus.taterlib.lib.configurate')
    relocate('com.typesafe.config', 'dev.neuralnexus.taterlib.lib.typesafe.config')
    relocate('io.leangen.geantyref', 'dev.neuralnexus.taterlib.lib.geantyref')

    // bStats
    relocate('org.bstats', 'dev.neuralnexus.taterlib.lib.bstats')

    // Gson
    relocate('com.google.gson', 'dev.neuralnexus.taterlib.lib.gson')

    // Guava
    relocate('com.google.common', 'dev.neuralnexus.taterlib.lib.guava')
    relocate('com.google.thirdparty', 'dev.neuralnexus.taterlib.lib.google.thirdparty')

    minimize()

    archiveFileName = "${project_id}-common-full-${version}.jar"
}

artifacts {
    archives(shadowJar)
}
